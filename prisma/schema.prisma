// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
  reviews  Review[]
  wishlist WishlistItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]
}

model Product {
  id              String    @id @default(cuid())
  name            String
  slug            String    @unique
  description     String    @db.Text
  shortDescription String?
  price           Int       // Price in cents
  comparePrice    Int?      // Compare at price in cents
  sku             String?   @unique
  trackQuantity   Boolean   @default(true)
  quantity        Int       @default(0)
  allowBackorder  Boolean   @default(false)
  weight          Float?    // Weight in grams
  length          Float?    // Length in cm
  width           Float?    // Width in cm
  height          Float?    // Height in cm
  status          ProductStatus @default(DRAFT)
  featured        Boolean   @default(false)
  tags            String[]
  seoTitle        String?
  seoDescription  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  categoryId      String?
  category        Category? @relation(fields: [categoryId], references: [id])
  
  images          ProductImage[]
  variants        ProductVariant[]
  reviews         Review[]
  orderItems      OrderItem[]
  wishlistItems   WishlistItem[]
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  width     Int?
  height    Int?
  order     Int     @default(0)
  createdAt DateTime @default(now())

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductVariant {
  id        String  @id @default(cuid())
  name      String  // e.g., "Small", "Red", "Small Red"
  sku       String? @unique
  price     Int?    // Override price in cents
  quantity  Int     @default(0)
  weight    Float?  // Override weight in grams
  status    ProductStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  options   ProductVariantOption[]
  orderItems OrderItem[]
}

model ProductVariantOption {
  id        String  @id @default(cuid())
  name      String  // e.g., "Size", "Color"
  value     String  // e.g., "Small", "Red"
  createdAt DateTime @default(now())

  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
}

model Order {
  id                String      @id @default(cuid())
  orderNumber       String      @unique
  status            OrderStatus @default(PENDING)
  subtotal          Int         // In cents
  tax               Int         // In cents
  shipping          Int         // In cents
  total             Int         // In cents
  currency          String      @default("USD")
  notes             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  userId            String?
  user              User?       @relation(fields: [userId], references: [id])
  
  shippingAddress   Json?
  billingAddress    Json?
  items             OrderItem[]
  payments          Payment[]
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Int     // Price at time of purchase in cents
  createdAt DateTime @default(now())

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
}

model Payment {
  id            String        @id @default(cuid())
  amount        Int           // In cents
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  method        String        // e.g., "stripe", "paypal"
  transactionId String?       // External transaction ID
  metadata      Json?         // Additional payment data
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  orderId       String
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  title     String?
  comment   String?  @db.Text
  verified  Boolean  @default(false)
  helpful   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model WishlistItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}